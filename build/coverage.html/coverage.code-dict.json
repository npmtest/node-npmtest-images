{"/home/travis/build/npmtest/node-npmtest-images/test.js":"/* istanbul instrument in package npmtest_images */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-images/lib.npmtest_images.js":"/* istanbul instrument in package npmtest_images */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_images = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_images = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-images/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-images && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_images */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_images\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_images.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_images.rollup.js'] =\n            local.assetsDict['/assets.npmtest_images.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_images.__dirname + '/lib.npmtest_images.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-images/node_modules/images/index.js":"/*\n * Index.js\n *\n * The MIT License (MIT)\n *\n * Copyright (c) 2013 ZhangYuanwei <zhangyuanwei1988@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sub license, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice (including the\n * next paragraph) shall be included in all copies or substantial portions\n * of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.\n * IN NO EVENT SHALL INTEL AND/OR ITS SUPPLIERS BE LIABLE FOR\n * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nvar USE_OLD_API = false,\n    fs = require(\"fs\"),\n    path = require(\"path\"),\n    _images = require(\"./binding.js\"),\n    _Image = _images.Image,\n    slice = Array.prototype.slice,\n    FILE_TYPE_MAP,\n    CONFIG_GENERATOR,\n    prototype,\n    nextGCThreshold = 0,\n    gcThreshold = 0;\n\nfunction WrappedImage(width, height) {\n    if (!(this instanceof WrappedImage)) return new WrappedImage(width, height);\n    if (gcThreshold && nextGCThreshold) {\n        if (images.getUsedMemory() > nextGCThreshold) {\n            images.gc();\n            nextGCThreshold = images.getUsedMemory() + gcThreshold;\n        }\n    }\n    this._handle = new _Image(width, height);\n}\n\nprototype = {\n    loadFromBuffer: function(buffer, start, end) {\n        this._handle.loadFromBuffer(buffer, start, end);\n    },\n    copyFromImage: function(img, x, y, width, height) {\n        if (img instanceof WrappedImage) {\n            img = img._handle;\n        }\n        this._handle.copyFromImage(img, x, y, width, height);\n    },\n    fill: function(red, green, blue, alpha) {\n        this._handle.fillColor(red, green, blue, alpha);\n    },\n    draw: function(img, x, y) {\n        if (img instanceof WrappedImage) {\n            img = img._handle;\n        }\n        this._handle.drawImage(img, x, y);\n    },\n    encode: function(type, config) {\n        var configurator;\n        if (typeof(type) != \"number\") {\n            type = String(type).toLowerCase();\n            type = (FILE_TYPE_MAP[\".\" + type] || FILE_TYPE_MAP[type]);\n        }\n        if (config != undefined) {\n            configurator = CONFIG_GENERATOR[type];\n            config = configurator && configurator(config);\n        }\n        return this._handle.toBuffer(type, config);\n    },\n    save: function(file, type, config) {\n        if (type && typeof(type) == \"object\") {\n            config = type;\n            type = undefined;\n        }\n        fs.writeFileSync(file, this.encode(type || path.extname(file), config));\n    },\n    saveAsync: function (file, type, config, callback) {\n        if (type && typeof(type) === 'object') {\n            config = type;\n            type = undefined;\n        }\n        if (!callback) {\n            if (typeof type === 'function') {\n                callback = type;\n                type = undefined;\n            }\n            if (typeof config === 'function') {\n                callback = config;\n                config = undefined;\n            }\n        }\n        fs.writeFile(file, this.encode(type || path.extname(file), config), callback);\n        return this;\n    },\n    resize: function(width, height, filter) {\n        this._handle.resize(width, height, filter);\n        return this;\n    },\n\n    size: function(width, height) {\n        var size;\n        if (width === undefined) return {\n            width: this.width(),\n            height: this.height()\n        };\n\n        if (height === undefined) {\n            size = this.size();\n            height = width * size.height / size.width;\n        }\n        this.width(width).height(height);\n    },\n    width: function(width) {\n        if (width === undefined) return this._handle.width;\n        this._handle.width = width;\n    },\n    height: function(height) {\n        if (height === undefined) return this._handle.height;\n        this._handle.height = height;\n    }\n};\n\nfunction bind(target, obj, aliases) {\n    var item;\n    for (item in obj) {\n        if (obj.hasOwnProperty(item)) {\n            target[item] = (function(fn) {\n                return function() {\n                    var ret = fn.apply(this, slice.call(arguments, 0));\n                    return ret === undefined ? this : ret;\n                };\n            })(obj[item]);\n            if (aliases.hasOwnProperty(item)) {\n                aliases[item].forEach(function(alias) {\n                    target[alias] = target[item];\n                });\n            }\n        }\n    }\n}\n\nbind(WrappedImage.prototype, prototype, {\n    \"fill\": [\"fillColor\"],\n    \"encode\": [\"toBuffer\"],\n    \"draw\": [\"drawImage\"]\n});\n\nfunction images(obj) {\n    var constructor;\n    if (obj instanceof Buffer) {\n        constructor = images.loadFromBuffer;\n    } else if (obj instanceof WrappedImage) {\n        constructor = images.copyFromImage;\n    } else if (typeof(obj) == \"string\") {\n        constructor = images.loadFromFile;\n    } else {\n        constructor = images.createImage;\n    }\n    return constructor.apply(images, slice.call(arguments, 0));\n}\n\nimages.TYPE_PNG = _images.TYPE_PNG;\nimages.TYPE_JPEG = _images.TYPE_JPEG;\nimages.TYPE_GIF = _images.TYPE_GIF;\nimages.TYPE_BMP = _images.TYPE_BMP;\nimages.TYPE_RAW = _images.TYPE_RAW;\n\nFILE_TYPE_MAP = {\n    \".png\": images.TYPE_PNG,\n    \".jpg\": images.TYPE_JPEG,\n    \".jpeg\": images.TYPE_JPEG,\n    \".gif\": images.TYPE_GIF,\n    \".bmp\": images.TYPE_BMP,\n    \".raw\": images.TYPE_RAW\n};\n\nCONFIG_GENERATOR = [];\n//CONFIG_GENERATOR[images.TYPE_PNG]\nCONFIG_GENERATOR[images.TYPE_JPEG] = function(config) {\n    var JPEG_CONFIG_SIZE = 5,\n        ret = new Buffer(JPEG_CONFIG_SIZE);\n\n    ret.write(\"JPEG\", 0, 4, \"ascii\");\n    ret[4] = config.quality === undefined ? 100 : config.quality;\n    return ret;\n};\n\nimages.Image = WrappedImage;\n\nimages.loadFromFile = function(file) {\n    return images.loadFromBuffer(fs.readFileSync(file));\n};\n\nimages.createImage = function(width, height) {\n    return WrappedImage(width, height);\n};\n\nimages.loadFromBuffer = function(buffer, start, end) {\n    return WrappedImage().loadFromBuffer(buffer, start, end);\n};\n\nimages.copyFromImage = function(src, x, y, width, height) {\n    return WrappedImage().copyFromImage(src, x, y, width, height);\n};\n\nimages.setLimit = function(maxWidth, maxHeight) {\n    _images.maxHeight = maxHeight;\n    _images.maxWidth = maxWidth;\n    return images;\n};\n\nimages.setGCThreshold = function(value) {\n    gcThreshold = value;\n    nextGCThreshold = value;\n};\n\nimages.getUsedMemory = function() {\n    return _images.usedMemory;\n};\n\nimages.gc = function() {\n    return _images.gc();\n};\n\nmodule.exports = USE_OLD_API ? _images : images;\n","/home/travis/build/npmtest/node-npmtest-images/node_modules/images/binding.js":"\n'use strict';\n\nvar fs = require('fs');\n\nvar buildModule = __dirname + '/build/Release/binding.node';\n\nif (fs.existsSync(buildModule)) {\n    try {\n        module.exports = require(buildModule);\n    } catch (e) {\n        console.log('Cant\\'t load `.node` module ' + buildModule);\n        throw e;\n    }\n    return;\n}\n\nfunction compiler(a, b) {\n\n    if (!/^(?:\\d+.?)+$/.test(a) || !/^(?:\\d+.?)+/.test(b)) {\n        return a > b;\n    }\n\n    var aArr = a.split('.');\n    var bArr = b.split('.');\n    var max = Math.max(aArr.length, bArr.length);\n\n    for (var i = 0; i < max; i++) {\n        if ((aArr[i] && !bArr[i])  || +aArr[i] > +bArr[i]) {\n            return 1;\n        } else if ((!aArr[i] && bArr[i]) || +aArr[i] < +bArr[i]) {\n            return -1;\n        }\n    }\n\n    return 0;\n}\n\nvar pkgInf = require('./package.json');\nvar bindingMap = pkgInf.bindingMap;\nvar bugUrl = pkgInf['bugs'] ? (pkgInf['bugs']['url'] || '') : '';\n\nfor ( var i in bindingMap)  {\n    if (bindingMap.hasOwnProperty(i)) {\n        var target = i;\n        var versions = bindingMap[i];\n\n        var cur = process.versions['node'];\n\n        if (compiler(versions[0], cur) <= 0 && compiler(versions[1], cur) >= 0) {\n            try {\n                module.exports = require('./bindings/'+ process.platform + '/' + process.arch + '/' + target + '/binding.node');\n                return;\n            } catch ( e ) {\n                throw new Error('Can\\'t load the addon. Issue to: ' + bugUrl + ' ' + e.stack);\n            }\n        }\n    }\n}\n\nthrow new Error('Can\\'t load the addon. Issue to: ' + bugUrl);\n","/home/travis/build/npmtest/node-npmtest-images/node_modules/images/install.js":"/*\n * install.js\n *\n * The MIT License (MIT)\n *\n * Copyright (c) 2013 ZhangYuanwei <zhangyuanwei1988@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sub license, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice (including the\n * next paragraph) shall be included in all copies or substantial portions\n * of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.\n * IN NO EVENT SHALL INTEL AND/OR ITS SUPPLIERS BE LIABLE FOR\n * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * This script will be excuted while npm installing this package.\n *\n * The flow of this script.\n * 1. Accroding to the client's platform download an addon binary\n *    package from github.\n * 2. Try the addon if fail then try `node-gyp` to rebuild a new addon bindary\n *    package.\n * 3. Run the test script.\n */\n\nvar step = require('step'),\n    fs = require('fs'),\n    path = require('path');\n\nfunction mkdirP ( p, mode, made ) {\n    if (mode === undefined) {\n        mode = 0777 & (~process.umask());\n    }\n    if (!made) made = null;\n\n    if (typeof mode === 'string') mode = parseInt(mode, 8);\n    p = path.resolve(p);\n\n    try {\n        fs.mkdirSync(p, mode);\n        made = made || p;\n    }\n    catch (err0) {\n        switch (err0.code) {\n            case 'ENOENT' :\n                made = mkdirP(path.dirname(p), mode, made);\n                mkdirP(p, mode, made);\n                break;\n\n            // In the case of any other error, just see if there's a dir\n            // there already.  If so, then hooray!  If not, then something\n            // is borked.\n            default:\n                var stat;\n                try {\n                    stat = fs.statSync(p);\n                }\n                catch (err1) {\n                    throw err0;\n                }\n                if (!stat.isDirectory()) throw err0;\n                break;\n        }\n    }\n\n    return made;\n}\n\n// Try to download binding.node from github.\nfunction download() {\n    var pkg = require('./package.json'),\n        https = require('https'),\n        url = require('url'),\n        done = this,\n        githubUser, githubRepos, downloadUrl;\n\n    if ( pkg.bindingsCDN ) {\n        downloadUrl = pkg.bindingsCDN;\n    } else if ( /([^\\/]+?)\\/([^\\.\\/]+?)\\.git$/i.test( pkg.repository.url ) ) {\n        githubUser = RegExp.$1;\n        githubRepos = RegExp.$2;\n        downloadUrl = 'https://raw.github.com/' + githubUser + '/' +\n                githubRepos + '/master/bindings/';\n    }\n\n    // Accroding to the client's platform and try to download an addon binary\n    // package from github.\n    if ( downloadUrl ) {\n        var map = require('./map.json'),\n            candidates, version, modPath, candidate;\n\n        version = process.versions.node;\n\n        try {\n            candidates = map[ process.platform ][ process.arch ];\n        } catch ( e ) {\n            return done( true, '' );\n        }\n\n\n        function versionCompare(left, right) {\n            if (typeof left + typeof right != 'stringstring')\n                return false;\n\n            var a = left.split('.'),\n                b = right.split('.'),\n                i = 0,\n                len = Math.max(a.length, b.length);\n\n            for (; i < len; i++) {\n                if ((a[i] && !b[i] && parseInt(a[i], 10) > 0) || (parseInt(a[i], 10) > parseInt(b[i], 10))) {\n                    return 1;\n                } else if ((b[i] && !a[i] && parseInt(b[i]) > 0) || (parseInt(a[i], 10) < parseInt(b[i], 10))) {\n                    return -1;\n                }\n            }\n\n            return 0;\n        }\n\n        if ( candidates.length ) {\n            do {\n                candidate = candidates.pop();\n\n                if ( versionCompare( version, candidate ) >= 0 ) {\n                    break;\n                }\n\n            } while ( candidates.length );\n\n            modPath = process.platform + '/' + process.arch + '/' +\n                    candidate + '/binding.node';\n        } else {\n            console.error( 'Can\\'t find the binding.node file.' );\n            return done( true );\n        }\n\n        // start to download.\n        var options = url.parse( downloadUrl + modPath ),\n            dest = './build/Release/binding.node',\n            client;\n\n        if ( fs.existsSync( dest ) ) {\n            console.log( 'The binding.node file exist, skip download.' );\n            done( false );\n            return;\n        }\n\n        console.log('Downloading', options.href );\n        client = https.get( options, function( res ) {\n            var count = 0,\n                notifiedCount = 0,\n                outFile;\n\n            if ( res.statusCode === 200 ) {\n                mkdirP( path.dirname( dest ) );\n                outFile = fs.openSync( dest, 'w' );\n\n                res.on('data', function( data ) {\n                    fs.writeSync(outFile, data, 0, data.length, null);\n                    count += data.length;\n\n                    if ( (count - notifiedCount) > 512 * 1024 ) {\n                      console.log('Received ' + Math.floor( count / 1024 ) + 'K...');\n                      notifiedCount = count;\n                    }\n                });\n\n                res.addListener('end', function() {\n                    console.log('Received ' + Math.floor(count / 1024) + 'K total.');\n                    fs.closeSync( outFile );\n                    done( false );\n                });\n\n            } else {\n                client.abort()\n                console.error('Error requesting archive');\n                done( true );\n            }\n        }).on('error', function(e) {\n            console.error( e.message );\n            done( true, e );\n        });\n    } else {\n        done( true );\n    }\n}\n\n// try to rebuild this.\nfunction rebuild( error ) {\n    var done = this,\n        cp = require('child_process');\n\n    cp.spawn(\n        process.platform === 'win32' ? 'node-gyp.cmd' : 'node-gyp', ['rebuild'], {\n        customFds: [0, 1, 2]\n    })\n    .on('exit', function(err) {\n        if (err) {\n            if (err === 127) {\n                console.error(\n                    'node-gyp not found! Please upgrade your install of npm! You need at least 1.1.5 (I think) ' +\n                    'and preferably 1.1.30.'\n                );\n            } else {\n                console.error('Build failed');\n            }\n\n            done( err );\n        }\n\n        done( false );\n    });\n}\n\n// simply include the binding.js script.\nfunction test( err ) {\n    // already failed?\n    if ( !err ) {\n        try {\n            delete require.cache[ require.resolve('./binding.js') ];\n\n            require('./binding.js');\n            this( false );\n        } catch ( e ) {\n            console.error('Test failed!');\n            err = true;\n        }\n    }\n\n    this( err );\n}\n\n// donwload first, if fail then rebuild it.\nstep( download, test, function( error ) {\n    // Do I need to rebuild?\n    if ( error ) {\n        step( rebuild, test, this );\n    } else {\n        return;\n    }\n}, function( error ) {\n    process.exit( error ? 1 : 0 );\n});"}